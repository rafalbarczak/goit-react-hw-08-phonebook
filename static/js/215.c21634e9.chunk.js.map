{"version":3,"file":"static/js/215.c21634e9.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","Redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/ContactFilter/ContactFilter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts;\nconst getContactItems = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContactItems, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter);\n    });\n  }\n);\n","import css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'Redux/selectors';\nimport { addContact } from 'Redux/contacts/operations';\nimport { Button, Card, Input } from '@mui/joy';\nimport { PersonAdd } from '@mui/icons-material';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    const doesAlreadyExist = contacts.items.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (doesAlreadyExist) {\n      form.reset();\n      return alert(`${name} is already in contacts`);\n    }\n\n    dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <Card variant=\"soft\" color=\"primary\">\n      <form className={css.form} onSubmit={handleSubmit}>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"Insert name\"\n          required\n        />\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          id=\"number\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"Insert phone number\"\n          required\n        />\n        <Button startDecorator={<PersonAdd />} type=\"submit\">\n          Add contact\n        </Button>\n      </form>\n    </Card>\n  );\n};\n","import { deleteContact } from 'Redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Avatar, Button } from '@mui/joy';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return contact ? (\n    <>\n      <td>\n        <Avatar>{contact.name.charAt(0)}</Avatar>\n      </td>\n      <td>{contact.name}</td>\n      <td>{contact.number}</td>\n      <td>\n        <Button name=\"delete\" onClick={handleDelete} color=\"danger\">\n          Delete\n        </Button>\n      </td>\n    </>\n  ) : null;\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { Contact } from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport { getFilteredContacts } from 'Redux/selectors';\nimport { Table } from '@mui/joy';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  return filteredContacts.length > 0 ? (\n    <Table\n      borderAxis=\"xBetween\"\n      color=\"neutral\"\n      size=\"lg\"\n      stickyFooter\n      stripe=\"odd\"\n      variant=\"soft\"\n    >\n      <thead>\n        <tr>\n          <th></th>\n          <th>Name</th>\n          <th>Number</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        {filteredContacts.map(contact => (\n          <tr key={contact.id}>\n            <Contact contact={contact} />\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  ) : null;\n};\n","import { getFilter } from 'Redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'Redux/actions';\nimport { Card, Input, Typography } from '@mui/joy';\n\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Card variant=\"plain\" maxWidth=\"50px\">\n      <label htmlFor=\"filter\">\n        <Typography level=\"title-md\">Find contacts by name</Typography>\n      </label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n    </Card>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'Redux/contacts/operations';\nimport { getContacts, getFilteredContacts } from 'Redux/selectors';\nimport { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { Helmet } from 'react-helmet';\nimport { CircularProgress, Typography } from '@mui/joy';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getContacts);\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        {' '}\n        <title>Contacts</title>\n      </Helmet>\n      <ContactForm />\n      {filteredContacts.length > 0 ? (\n        <>\n          <ContactFilter />\n          <ContactList />\n        </>\n      ) : (\n        <Typography\n          level=\"title-lg\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          display=\"flex\"\n          height=\"300px\"\n        >\n          It's time to add some contacts to your phonebook!\n        </Typography>\n      )}\n      <div>\n        {isLoading && (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              marginTop: '15px',\n            }}\n          >\n            <CircularProgress size=\"lg\" />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","getFilter","filter","getFilteredContacts","createSelector","items","contact","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","Card","variant","color","className","css","onSubmit","e","preventDefault","form","target","elements","value","number","find","reset","alert","addContact","Input","type","id","title","placeholder","required","Button","startDecorator","PersonAdd","Contact","Avatar","charAt","onClick","deleteContact","ContactList","filteredContacts","length","Table","borderAxis","size","stickyFooter","stripe","map","ContactFilter","maxWidth","htmlFor","Typography","level","onChange","setFilter","isLoading","useEffect","fetchContacts","Helmet","alignItems","justifyContent","display","height","style","marginTop","CircularProgress"],"sourceRoot":""}